
$#include "PluginProtocol.h"
$#include <map>
$#include <string>
$#include "ProtocolUser.h"
$#include "ProtocolIAP.h"
$#include "PluginManager.h"
$using namespace cocos2d::plugin;
class PluginManager
{
public:

    static PluginManager* getInstance();
    static void end();
    PluginProtocol* loadPlugin(const char* name);
    void unloadPlugin(const char* name);
};

typedef enum
{
    kLoginSucceed = 0,
    kLoginFailed,
    kLogoutSucceed,
    kInitFinish,
	kUpdateNew,
	kNoUpdate
} UserActionResultCode;

class ProtocolUser : public PluginProtocol
{
public:
   void setDebugMode(bool bDebug);
    void configDeveloperInfo();
    void set(const char* key,const char* value);
    void login();
    void logout();
    bool isLogined();
    std::string getSessionID();
    void setListener(LUA_FUNCTION  listener);
	std::string callFunction(const char* funcName);
	void callFunctionWithString(const char* funcName,const char* parm);
}

typedef enum 
{
    kPaySuccess = 0,
    kPayFail,
    kPayCancel,
    kPayTimeOut,
} PayResultCode;

class ProtocolIAP : public PluginProtocol
{
public:
    void setDebugMode(bool bDebug);
    void configDeveloperInfo();
    void payForProduct();
    void set(const char* key,const char* value);
    void setListener(LUA_FUNCTION listener);

};
